{
  "author": {
    "name": "Randy Merrill",
    "email": "Zoramite+github@gmail.com",
    "url": "http://forthedeveloper.com"
  },
  "name": "less-middleware",
  "description": "LESS.js middleware for connect.",
  "version": "0.1.14",
  "repository": {
    "type": "git",
    "url": "git://github.com/emberfeather/less.js-middleware.git"
  },
  "main": "lib/middleware.js",
  "dependencies": {
    "less": "~1.5",
    "mkdirp": "~0.3",
    "node.extend": "~1.0"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": ">= 0.7.1"
  },
  "readme": "## Installation\n\n    sudo npm install less-middleware\n\n## Options\n\n<table>\n    <thead>\n        <tr>\n            <th>Option</th>\n            <th>Description</th>\n            <th>Default</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <th><code>force</code></th>\n            <td>Always re-compile less files on each request.</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>once</code></th>\n            <td>Only check for need to recompile once after each server restart. Useful for reducing disk i/o on production.</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>debug</code></th>\n            <td>Output any debugging messages to the console.</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>src</code></th>\n            <td>Source directory containing the <code>.less</code> files. <strong>Required.</strong></td>\n            <td></td>\n        </tr>\n        <tr>\n            <th><code>dest</code></th>\n            <td>Desitnation directory to output the compiled <code>.css</code> files.</td>\n            <td><code>&lt;src&gt;</code></td>\n        </tr>\n        <tr>\n            <th><code>paths</code></th>\n            <td>Specify search paths for <code>@import</code> directives</td>\n            <td>The <code>dirname</code> of <code>&lt;src&gt;</code></td>\n        </tr>\n        <tr>\n            <th><code>prefix</code></th>\n            <td>Path which should be stripped from the public <code>pathname</code>.</td>\n            <td></td>\n        </tr>\n        <tr>\n            <th><code>compress</code></th>\n            <td>Compress the output being written to the <code>*.css</code> files. When set to <code>'auto'</code> compression will only happen when the css file ends with <code>.min.css</code> or <code>-min.css</code>.</td>\n            <td><code>auto</code></td>\n        </tr>\n        <tr>\n            <th><code>yuicompress</code></th>\n            <td>More involved minification with <a href=\"http://yui.github.io/yuicompressor/css.html\">YUI compression</a></td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>optimization</code></th>\n            <td>Desired level of LESS optimization. Optionally <code>0</code>, <code>1</code>, or <code>2</code></td>\n            <td><code>0</code></td>\n        </tr>\n        <tr>\n            <th><code>dumpLineNumbers</code></th>\n            <td>Add line tracking to the compiled css. Optionally <code>0</code>, <code>'comments'</code>, or <code>'mediaquery'</code></td>\n            <td><code>0</code></td>\n        </tr>\n        <tr>\n            <th><code>relativeUrls</code></th>\n            <td>Adjust urls to be relative to directory of files imported with @import. If false, urls will remain unchanged.</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>sourceMap</code></th>\n            <td>Enable sourcemap support. You can compile your less and then use developer tools to see where in your less file a particular piece of css comes from.</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>preprocessor</code></th>\n            <td>Specify a preprocessing function applied to LESS source code before parsing. The function will receive the LESS source code and the Connect request object as parameters, and must return the modified source code.</td>\n            <td></td>\n        </tr>\n         <tr>\n            <th><code>treeFunctions</code></th>\n            <td>Object with custom functions added to <code>less.tree.functions</code>.</td>\n            <td></td>\n        </tr>\n    </tbody>\n</table>\n\n## Examples\n\n### Connect\n\n    var lessMiddleware = require('less-middleware');\n\n    var server = connect.createServer(\n        lessMiddleware({\n            src: __dirname + '/public',\n            compress: true\n        }),\n        connect.staticProvider(__dirname + '/public')\n    );\n\n### Express\n\n    var lessMiddleware = require('less-middleware');\n\n    var app = express.createServer();\n\n    app.configure(function () {\n        // Other configuration here...\n\n        app.use(lessMiddleware({\n            src: __dirname + '/public',\n            compress: true\n        }));\n\n        app.use(express.static(__dirname + '/public'));\n    });\n\n### Express - Different `src` and `dest`\n\nWhen using a different `src` and `dest` you can use the `prefix` option to make the directory structure cleaner.\n\nRequests for static assets (like stylesheets) made to the express server use a `pathname` to look up the file. So if the request is for `http://localhost/stylesheets/styles.css` the `pathname` will be `/stylesheets/styles.css`.\n\nThe less middleware uses that path to determine where to look for less files. In the original example it looks for the less file at `/public/stylesheets/styles.less` and compiles it to `/public/stylesheets/styles.css`.\n\nIf you are using a different `src` and `dest` options it causes for more complex directories structures unless you use the `prefix` option. For example, without the `prefix`, and with a `src` of `/src/less` and a `dest` of `/public` it would look for the less file at `/src/less/stylesheets/styles.less` and compile it to `/public/stylesheets/styles.css`. To make it cleaner you can use the `prefix` option:\n\n    var lessMiddleware = require('less-middleware');\n\n    var app = express.createServer();\n\n    app.configure(function () {\n        // Other configuration here...\n\n        app.use(lessMiddleware({\n            dest: __dirname + '/public/stylesheets',\n            src: __dirname + '/src/less',\n            prefix: '/stylesheets',\n            compress: true\n        }));\n\n        app.use(express.static(__dirname + '/public'));\n    });\n\nUsing the `prefix` it changes the `pathname` from `/stylesheets/styles.css` to `/styles.css`. With that prefix removed from the `pathname` it makes things cleaner. With the `prefix` removed it would look for the less file at `/src/less/styles.less` and compile it to `/public/stylesheets/styles.css`.\n\nA new alternative way to achieve the same thing as using prefix but with greater flexibility is to supply a shared root value. From this shared root, you would specify a URI style path to the appropriate source and destination directories:\n\n```javascript\nvar lessMiddleware = require('less-middleware')\n  , path = require('path')\n  , pubDir = path.join(__dirname, 'public')\n  , app = express.createServer();\n  \napp.configure(function() {\n    app.use(lessMiddleware({\n        dest: '/css', // should be the URI to your css directory from the location bar in your browser\n        src: '/less', // or '../less' if the less directory is outside of /public\n        root: pubDir,\n        compress: true\n    }));\n    \n    app.use(express.static(pubDir));\n});\n```\n\nThis will allow any file under the /less directory, including subdirectories, to be compiled into an identical directory structure under /css.\n\n### Express - Using a temp directory for `dest`\n\nSince less middleware relies on static content to be served by express.static, using temp directories just requires that you inform express about where generated files are built:\n\n    var lessMiddleware = require('less-middleware'),\n        os = require('os');\n\n    var app = express.createServer();\n\n    app.configure(function () {\n        // Other configuration here...\n\n        var tmpDir = os.tmpDir();\n        app.use(lessMiddleware({\n            src: __dirname + '/public/stylesheets',\n            dest: tmpDir,\n            compress: true\n        }));\n\n        app.use(express.static(__dirname + '/public'));\n        app.use(express.static(tmpDir));\n    });\n\nUsing a temp directory is useful for read-only file systems, such as a Heroku deployment. By using a temp directory the css files can still be written and served.\n\n### Importing less\n\nBy default the directory in which the compiled files live in is already set as an import directive:\n\n```css\n// file1.less\n\n@import 'file2.less';\n\nbody {\n  color: @bodyColor;\n}\n```\n\n```css\n// file2.less\n\n@bodyColor: #333333;\n```\n\nHowever, you can use the `paths` option if you need to specify other directories in which to search for importable less files.\n\n```js\nvar less = require('less-middleware'),\n    path = require('path');\n\n    lessMiddleware({\n        src: path.join(__dirname, 'public'),\n        paths: [path.join(__dirname, 'module', 'less')]\n    });\n```\n\n```css\n// public/base.css\n\n@import 'colors';\n\nbody {\n  color: @bodyColor;\n}\n```\n\n```css\n// module/less/colors.less\n\n@bodyColor: #333333;\n```\n\n### Using bootstrap\n\nHere's an example on how to use Twitter's bootstrap within an Express.js set-up:\n\n```js\n// package.json\n{\n  \"name\": \"my-module\",\n  // ...\n  \"dependencies\": {\n    \"less-middleware\": \"*\",\n    \"bootstrap\": \"git+https://github.com/twitter/bootstrap.git#v2.2.2\",\n    \"express\": \"3.0\"\n  }\n}\n```\n\n```js\n// app.js\nvar express  = require('express')\n  , path     = require('path')\n  , app      = express()\n  , less     = require('less-middleware');\n\napp.configure(function(){\n  // ...\n  var bootstrapPath = path.join(__dirname, 'node_modules', 'bootstrap');\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use('/img', express['static'](path.join(bootstrapPath, 'img')));\n  app.use(app.router);\n  app.use(less({\n    src    : path.join(__dirname, 'assets', 'less'),\n    paths  : [path.join(bootstrapPath, 'less')],\n    dest   : path.join(__dirname, 'public', 'stylesheets'),\n    prefix : '/stylesheets'\n  }));\n  app.use(express['static'](path.join(__dirname, 'public')));\n  // ...\n});\n\n// ...\n```\n\n```css\n// assets/less/base.less\n\n@import 'bootstrap';\n@import 'responsive';\n\n@bodyBackground: #FAF7EC;\n@navbarBrandColor: #989CAE;\n\n.brand {\n  font-family: @monoFontFamily;\n}\n```\n\n### Preprocessing\n\n    var lessMiddleware = require('less-middleware');\n\n    var app = express.createServer();\n\n    app.configure(function () {\n        // Other configuration here...\n\n        app.use(lessMiddleware({\n            src: __dirname + '/public',\n            preprocessor: function(src, req) {\n                if (req.param(\"namespace\")) {\n                    src = req.param(\"namespace\") + \" { \" + src + \" }\";\n                }\n                \n                return src;\n            },\n            compress: true\n        }));\n\n        app.use(express.static(__dirname + '/public'));\n    });\n\n## Troubleshooting\n\n### My less never recompiles, even when I use `{force: true}`!\nMake sure you're declaring less-middleware before your static middleware, if you're using the same directory, e.g. (with express):\n```js\napp.use(require('less-middleware')({ src: __dirname + '/public', debug: true }));\napp.use(express.static(path.join(__dirname, 'public')));\n```\nnot\n```js\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(require('less-middleware')({ src: __dirname + '/public', debug: true }));\n```\n\n### IIS\nIf you are hosting your app on IIS you will have to modify your `web.config` file in order to allow NodeJS to serve your CSS static files.  IIS will cache your CSS files, bypassing NodeJS static file serving, which in turn does not allow the middleware to recompile your LESS files.\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/emberfeather/less.js-middleware/issues"
  },
  "homepage": "https://github.com/emberfeather/less.js-middleware",
  "_id": "less-middleware@0.1.14",
  "dist": {
    "shasum": "b576060803504f5a326abe8476b296f31730b9fc"
  },
  "_from": "less-middleware@*",
  "_resolved": "https://registry.npmjs.org/less-middleware/-/less-middleware-0.1.14.tgz"
}
